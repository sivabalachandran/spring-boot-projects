package com.ebi.assessment.person.persistance;

import io.swagger.annotations.ApiModelProperty;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.apache.commons.lang3.StringUtils;
import org.springframework.util.Assert;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.io.Serializable;
import java.util.Optional;

@Entity
@Builder(builderClassName = "Builder", setterPrefix = "with")
@Getter
@ToString
@EqualsAndHashCode
public class PersonEntity implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("Resource Id - Autogenerated")
    private Integer id;
    @ApiModelProperty("First name")
    private String firstName;
    @ApiModelProperty("Last name")
    private String lastName;
    @ApiModelProperty("Age")
    private Integer age;
    @ApiModelProperty("Favorite Color")
    private String favoriteColor;

    protected PersonEntity() {
    }

    public PersonEntity(final Integer id,
                        final String firstName,
                        final String lastName,
                        final Integer age,
                        final String favoriteColor) {

        this.id = id;
        this.firstName = checkPresent(firstName, "Invalid first name");
        this.lastName = checkPresent(lastName, "Invalid last name");
        Assert.isTrue(age != null && age > 0, "Invalid age passed");
        this.age = age;
        this.favoriteColor = checkPresent(favoriteColor, "Invalid favorite color");
    }

    String checkPresent(final String candidate, final String message) {
        return Optional.ofNullable(candidate)
                .filter(StringUtils::isNotBlank)
                .orElseThrow(() -> new IllegalArgumentException(message));
    }
}
